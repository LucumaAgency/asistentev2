name: CI/CD Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install

    - name: Build frontend
      working-directory: ./frontend
      run: |
        # Limpiar dist anterior
        rm -rf dist
        # Construir nuevo
        npm run build

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Create or update production branch
      run: |
        # Fetch all branches
        git fetch origin
        
        # Check if production branch exists remotely
        if git ls-remote --exit-code --heads origin production; then
          echo "Production branch exists, checking out..."
          # Force checkout to production branch
          git checkout -f production
          git reset --hard origin/production
          
          # Merge changes from main, preferring main's version for conflicts
          git merge main --no-edit --strategy-option=theirs || true
        else
          echo "Creating production branch..."
          git checkout -b production
        fi
        
        # Ensure the dist folder is tracked
        echo "Current directory structure:"
        ls -la frontend/

    - name: Commit and push to production
      run: |
        # Add all files including the built dist folder
        git add -A
        
        # Force add dist folder (in case it's in gitignore)
        git add -f frontend/dist
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Create commit with proper message formatting
          COMMIT_MSG="Deploy: Build frontend from main branch"
          COMMIT_MSG="${COMMIT_MSG}\n\nBuilt from commit: ${{ github.sha }}"
          COMMIT_MSG="${COMMIT_MSG}\nBuild time: $(date)"
          
          echo -e "$COMMIT_MSG" | git commit -F -
        fi
        
        # Push to production branch
        git push origin production --force-with-lease || git push origin production --force

    - name: Summary
      run: |
        echo "### Deployment Summary 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: main → production" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Message**: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Author**: ${{ github.event.head_commit.author.name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Frontend built and pushed to production branch" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📝 **Next steps**:" >> $GITHUB_STEP_SUMMARY
        echo "1. Plesk will detect changes in production branch" >> $GITHUB_STEP_SUMMARY
        echo "2. Deploy manually or wait for auto-deploy if configured" >> $GITHUB_STEP_SUMMARY
        echo "3. Run 'NPM install' in Plesk if dependencies changed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Verify build at**: frontend/dist folder in production branch" >> $GITHUB_STEP_SUMMARY